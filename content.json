{"meta":{"title":"黄骏捷的个人博客","subtitle":"咸鱼翻了身还是咸鱼","description":"黄骏捷","author":"黄骏捷","url":"http://acjie.github.io"},"pages":[{"title":"archives","date":"2018-09-10T12:28:00.000Z","updated":"2018-09-10T12:28:00.371Z","comments":true,"path":"archives/index.html","permalink":"http://acjie.github.io/archives/index.html","excerpt":"","text":""},{"title":"分类","date":"2018-09-11T08:51:28.000Z","updated":"2018-09-11T08:58:07.339Z","comments":true,"path":"categories/index.html","permalink":"http://acjie.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-09-11T08:54:46.000Z","updated":"2018-09-11T08:57:54.347Z","comments":true,"path":"tags/index.html","permalink":"http://acjie.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"c++入门知识","slug":"c++入门知识","date":"2018-09-12T10:45:38.000Z","updated":"2018-09-12T14:06:42.307Z","comments":true,"path":"2018/09/12/c++入门知识/","link":"","permalink":"http://acjie.github.io/2018/09/12/c++入门知识/","excerpt":"","text":"欢迎来到c艹世界！ 一 简单说一下c++以及c++对c的扩充 在c语言基础上添加了对面向对象编程和泛型编程的支持，继承了c语言的高效，简洁，快速和可移植性的传统，带来了全新的编程方法，用来应对复杂度不断提高的任务，c++的模板特性提供了另一种全新的编程方法——泛型 编程。 新术语：对象、类、封装、数据隐藏、多态和继承等。 二 const定义常变量 函数的重载 函数模板 引用 内联函数 字符串变量string 动态内存分配与删除 三①c语言常用#define指令来定义符号常量。 int a=1,b=2; #define P a+b 它只是单纯的置换，将P置换成1+2, PP等于1+21+2而并非是(1+2)*(1+2) P不是变量，没有类型，不占据储存单元，易出错 constconst int P 2; 而const可以定义常变量，使其具有变量属性、数据类型、地址，占用存储单元,指针可指向它，程序运行时P的值不会改变，可以实现上述的(1+2)*(1+2) ② 函数的重载 运算符&lt;&lt;和&gt;&gt;可以是左移运算符和右移运算符，也可以作为cin的输入和cout的输出，不同场合不同的作用，这就是运算符的重载，函数的重载解释如下: c语言同一作用域函数名一样 #include&lt;iostream&gt; using namespace std int max1(int a,int b) { &nbsp; &nbsp; &nbsp;&nbsp;if(a&gt;b) &nbsp; &nbsp; &nbsp;&nbsp;return a;} } float max2(float a,float b=2) { &nbsp; &nbsp; &nbsp;&nbsp;if(a&gt;b) &nbsp; &nbsp; &nbsp;&nbsp;return a;} } int main() &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39; c++可以函数重载,同一作用域可以使用相同函数名(注意上下max) #include&lt;iostream&gt; using namespace std int max(int a,int b) { &nbsp; &nbsp; &nbsp;&nbsp;if(a&gt;b) &nbsp; &nbsp; &nbsp;&nbsp;return a;} } float max(float a,float b=2) { &nbsp; &nbsp; &nbsp;&nbsp;if(a&gt;b) &nbsp; &nbsp; &nbsp;&nbsp;return a;} } int main() &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39; **③** **函数模板** 函数重载可以实现一个函数名多用，上述函数的行参的类型不同，仍需要分别定义一次int,long什么的，c++提供了函数模板，可以建立一个通用函数：(上述函数简化如下,作用相同) `#include&lt;iostream&gt;` using namespace std T max(T a,T b) { &nbsp; &nbsp; &nbsp;&nbsp;if(a&gt;b) &nbsp; &nbsp; &nbsp;&nbsp;return a;} } int main() &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39; 通用函数定义： template&lt;typename T&gt;或class&lt;class T&gt; ④ 引用 变量的引用就是变量的别名，a和b的作用相同，都代表同一变量，下述中&amp;是”引用”，不代表地址，对变量声明一个引用，并不开辟内存单元，a和b代表同一变量单元，地址相同，声明一个引用时，需同时初始化，且同一数据类型，要有指定，不能引用数组 int a=10;int &amp;b=a; //则b的值也为10，指定，不能单独int &amp;b c语言交换i和j的值，一般我们这样操作 #include&lt;iostream&gt;using namespace std;void swap(int *a,int *b){&nbsp; &nbsp; &nbsp;&nbsp;int temp;&nbsp; &nbsp; &nbsp;&nbsp;temp=*a;&nbsp; &nbsp; &nbsp;&nbsp;*a=*b;&nbsp; &nbsp; &nbsp;&nbsp;*b=temp;}int main(){&nbsp; &nbsp; &nbsp;&nbsp;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&nbsp; &nbsp; &nbsp;&nbsp;swap(&amp;i,&amp;j);&nbsp; &nbsp; &nbsp;&nbsp;&#39;&#39;&#39;&#39;&#39;&#39;&#39;} c++可以将引用作为参数 #include&lt;iostream&gt;using namespace std;void swap(int &amp;a,int &amp;b){&nbsp; &nbsp; &nbsp;&nbsp;int temp;&nbsp; &nbsp; &nbsp;&nbsp;temp=a;&nbsp; &nbsp; &nbsp;&nbsp;a=b;&nbsp; &nbsp; &nbsp;&nbsp;b=temp;}int main(){&nbsp; &nbsp; &nbsp;&nbsp;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&nbsp; &nbsp; &nbsp;&nbsp;swap(i,j);&nbsp; &nbsp; &nbsp;&nbsp;&#39;&#39;&#39;&#39;&#39;&#39;&#39;} ⑤ 内联函数 将函数代码嵌入到主调函数，称为内置函数，因为有时频繁调用该函数时，累计时间会很长，内置函数可以调到程序执行效率，在函数前加inlineinline int max(int a,int b){&nbsp; &nbsp; &nbsp;&nbsp;&#39;&#39;&#39;&#39;&#39;&#39;&#39;}int main(){&nbsp; &nbsp; &nbsp;&nbsp;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&nbsp; &nbsp; &nbsp;&nbsp;swap(i,j); //可以直接这样调用外函数，不需要用指针或者引用&nbsp; &nbsp; &nbsp;&nbsp;&#39;&#39;&#39;&#39;&#39;&#39;&#39;} ⑥ 字符串变量string 头文件string，可以直接给字符串变量赋值，字符数组不可用 char str[100];str=&quot;yyyyy&quot;; //错误string a=&quot;hhhhhhh&quot;;string b; b=a; //正确，可以直接赋值 c字符串比较 #include&lt;string.h&gt; char a[5]=&quot;abcde&quot; strcmp(a,&quot;abcde&quot;) //一样返回0 c++字符串比较 &gt; #include&lt;cstring&gt; string a=&quot;abcde&quot; a!=&quot;abcde&quot; //c++比较 ⑦ 动态内存分配与释放 c语言用moollc和free来开辟内存和释放，molloc函数必须指定开辟大小，且不方便获取返回的数据，麻烦，c++提供运算符new和delete来取代malloc和free函数 #include&lt;iostream&gt;using namespace std;int main(){ &nbsp; &nbsp; &nbsp;&nbsp;int a=100; &nbsp; &nbsp; &nbsp;&nbsp;int *p=new int;//molloc和new都可以分配内存，指针需要分配内存 &nbsp; &nbsp; &nbsp;&nbsp; cout&lt;&lt;&quot;a=&quot;&lt;&lt;a&lt;&lt;endl; &nbsp; &nbsp; &nbsp;&nbsp; cout&lt;&lt;&quot;a的地址=&quot;&lt;&lt;&amp;a&lt;&lt;endl; &nbsp; &nbsp; &nbsp;&nbsp; cout&lt;&lt;*p=&quot;&lt;&lt;*p&lt;&lt;endl; &nbsp; &nbsp; &nbsp;&nbsp;cout&lt;&lt;*p的地址&lt;&lt;p&lt;&lt;endl; delete *p //释放内存 return 0; }","categories":[{"name":"c++","slug":"c","permalink":"http://acjie.github.io/categories/c/"}],"tags":[{"name":"c++入门知识","slug":"c-入门知识","permalink":"http://acjie.github.io/tags/c-入门知识/"}]},{"title":"my-first-blog","slug":"my-first-blog","date":"2018-09-09T07:12:42.000Z","updated":"2018-09-09T10:06:43.439Z","comments":true,"path":"2018/09/09/my-first-blog/","link":"","permalink":"http://acjie.github.io/2018/09/09/my-first-blog/","excerpt":"","text":"潘建飞","categories":[{"name":"独一无二的分类","slug":"独一无二的分类","permalink":"http://acjie.github.io/categories/独一无二的分类/"}],"tags":[]}]}